DROP TABLE INVENTORY CASCADE CONSTRAINTS;
DROP TABLE ORDERS CASCADE CONSTRAINTS;
DROP TABLE ORDER_PRODUCTS CASCADE CONSTRAINTS;
DROP TABLE DELIVERIES CASCADE CONSTRAINTS;
DROP TABLE COLLECTIONS CASCADE CONSTRAINTS;
DROP TABLE STAFF CASCADE CONSTRAINTS;
DROP TABLE STAFF_ORDERS CASCADE CONSTRAINTS;

CREATE TABLE INVENTORY (
    ProductID INTEGER NOT NULL,
    ProductDesc VARCHAR(30) NOT NULL,
    ProductPrice NUMERIC(8,2) NOT NULL,
    ProductStockAmount INTEGER NOT NULL,
    CHECK (ProductPrice >= 0),
    CHECK (ProductStockAmount >= 0),
    PRIMARY KEY (ProductID)
);

CREATE TABLE ORDERS (
    OrderID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    OrderType VARCHAR(30) NOT NULL,
    OrderCompleted INTEGER NOT NULL,
    OrderPlaced DATE NOT NULL,
    CHECK (OrderType IN ('InStore', 'Collection', 'Delivery')),
    CHECK (OrderCompleted = 0 OR OrderCompleted = 1),
    PRIMARY KEY(OrderID)
);

-- Defined PRIMARY KEY this way as cannot gaurentee that OrderID or ProductID
-- will be unique by themselves.
CREATE TABLE ORDER_PRODUCTS (
    OrderID INTEGER NOT NULL,
    ProductID INTEGER NOT NULL,
    ProductQuantity INTEGER NOT NULL,
    CHECK (ProductQuantity >= 1),
    PRIMARY KEY(OrderID, ProductID),
    FOREIGN KEY(OrderID) REFERENCES ORDERS(OrderID) ON DELETE CASCADE,
    FOREIGN KEY(ProductID) REFERENCES INVENTORY(ProductID) ON DELETE CASCADE
);

CREATE TABLE DELIVERIES (
    OrderID INTEGER NOT NULL,
    FName VARCHAR(30) NOT NULL,
    LName VARCHAR(30) NOT NULL,
    House VARCHAR(30) NOT NULL,
    Street VARCHAR(30) NOT NULL,
    City VARCHAR(30) NOT NULL,
    DeliveryDate DATE NOT NULL,
    PRIMARY KEY(OrderID),
    FOREIGN KEY(OrderID) REFERENCES ORDERS(OrderID)
);

CREATE TABLE COLLECTIONS (
    OrderID INTEGER NOT NULL,
    FName VARCHAR(30) NOT NULL,
    LName VARCHAR(30) NOT NULL,
    CollectionDate DATE NOT NULL,
    PRIMARY KEY(OrderID),
    FOREIGN KEY(OrderID) REFERENCES ORDERS(OrderID) ON DELETE CASCADE
);

CREATE TABLE STAFF (
    StaffID INTEGER NOT NULL,
    FName VARCHAR(30) NOT NULL,
    LName VARCHAR(30) NOT NULL,
    PRIMARY KEY(StaffID)
);

CREATE TABLE STAFF_ORDERS (
    StaffID INTEGER NOT NULL,
    OrderID INTEGER NOT NULL,
    PRIMARY KEY(StaffID, OrderID),
    FOREIGN KEY(StaffID) REFERENCES STAFF(StaffID) ON DELETE CASCADE,
    FOREIGN KEY(OrderID) REFERENCES ORDERS(OrderID) ON DELETE CASCADE
);

-- create a trigger to replenish stock when an order is deleted.
CREATE TRIGGER UPDATE_STOCK_QUANTITY
    BEFORE DELETE ON ORDER_PRODUCTS
    FOR EACH ROW
BEGIN
    UPDATE INVENTORY
    SET ProductStockAmount = ProductStockAmount + :OLD.ProductQuantity
    WHERE ProductID = :OLD.ProductID;
END UPDATE_STOCK_QUANTITY;
/

-- create a view to gather a table used in Option 7
CREATE OR REPLACE VIEW SALES_TABLE AS
(SELECT * FROM
    (SELECT ProductID, FName, LName, TotalValueSold
    FROM STAFF e
    INNER JOIN
        (SELECT d.ProductID, StaffID, SUM(ProductQuantity) AS TotalValueSold
        FROM INVENTORY c
        RIGHT JOIN
            (SELECT StaffID, a.ProductID, ProductQuantity
            FROM ORDER_PRODUCTS a
            LEFT JOIN STAFF_ORDERS b
            ON a.OrderID = b.OrderID) d
        ON c.ProductID = d.ProductID
        WHERE (ProductQuantity * ProductPrice) > 20000
        GROUP BY StaffID, d.ProductID) f
    ON e.StaffID = f.StaffID));
